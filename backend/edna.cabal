cabal-version:  2.4
-- SPDX-FileCopyrightText: 2021 Serokell <https://serokell.io>
--
-- SPDX-License-Identifier: AGPL-3.0-or-later

name:           edna
-- When you think it's ready to be released, set the version to something like 0.1.0.
version:        0
synopsis:       A tool for data analysis aimed to help researchers with their experiments.
description:
  This is the backend (server) for a tool for data analysis aimed to help
  researchers with their experiments.
category:       Bio
homepage:       https://github.com/serokell/edna#readme
bug-reports:    https://github.com/serokell/edna/issues
author:         Serokell <hi@serokell.io>
maintainer:     Serokell <hi@serokell.io>
copyright:      2021 Serokell <https://serokell.io>
license:        AGPL-3.0-or-later
license-file:   LICENSE
build-type:     Simple
extra-source-files: sql/init.sql, ./resources/testSheets/**/*.xlsx

source-repository head
  type: git
  location: https://github.com/serokell/edna

common common-options
  build-depends:
      base <5
    , universum
  ghc-options: -Weverything -Wno-missing-exported-signatures -Wno-missing-import-lists -Wno-missed-specialisations -Wno-all-missed-specialisations -Wno-unsafe -Wno-safe -Wno-missing-local-signatures -Wno-monomorphism-restriction -Wno-implicit-prelude -Wno-prepositive-qualified-module -Wno-inferred-safe-imports -Wno-missing-safe-haskell-mode
  default-extensions: AllowAmbiguousTypes BangPatterns BlockArguments ConstraintKinds DataKinds DefaultSignatures DeriveAnyClass DeriveDataTypeable DeriveFoldable DeriveFunctor DeriveGeneric DeriveTraversable DerivingStrategies DerivingVia EmptyCase FlexibleContexts FlexibleInstances GADTs GeneralizedNewtypeDeriving LambdaCase MultiParamTypeClasses MultiWayIf NamedFieldPuns NegativeLiterals NumDecimals NoImplicitPrelude OverloadedLabels OverloadedStrings PatternSynonyms PolyKinds QuasiQuotes RankNTypes RecordWildCards RecursiveDo ScopedTypeVariables StandaloneDeriving StrictData TemplateHaskell TupleSections TypeApplications TypeFamilies TypeOperators UndecidableInstances UndecidableSuperClasses ViewPatterns
  default-language: Haskell2010

library
  import: common-options
  exposed-modules:
      Edna.Analysis.FourPL
      Edna.Config.CLA
      Edna.Config.Definition
      Edna.Config.Environment
      Edna.Config.Prepare
      Edna.DB.Connection
      Edna.DB.Initialisation
      Edna.DB.Integration
      Edna.DB.Schema
      Edna.DB.Util
      Edna.Dashboard.DB.Query
      Edna.Dashboard.DB.Schema
      Edna.Dashboard.Error
      Edna.Dashboard.Service
      Edna.Dashboard.Web.API
      Edna.Dashboard.Web.Types
      Edna.ExperimentReader.Error
      Edna.ExperimentReader.Parser
      Edna.ExperimentReader.Types
      Edna.Library.DB.Query
      Edna.Library.DB.Schema
      Edna.Library.Error
      Edna.Library.Service
      Edna.Library.Web.API
      Edna.Library.Web.Types
      Edna.Logging
      Edna.Orphans
      Edna.Setup
      Edna.Upload.DB.Query
      Edna.Upload.DB.Schema
      Edna.Upload.Error
      Edna.Upload.Service
      Edna.Upload.Web.API
      Edna.Upload.Web.Types
      Edna.Util
      Edna.Util.URI
      Edna.Web.API
      Edna.Web.Handlers
      Edna.Web.Server
      Edna.Web.Swagger
      Edna.Web.Types
  other-modules:
      Edna.Analysis.Infra
      Edna.Web.Error
  hs-source-dirs:
      src
  build-depends:
    aeson,
    aeson-casing,
    beam-core,
    beam-postgres,
    bytestring,
    containers,
    data-default,
    filepath,
    fmt,
    microlens,
    microlens-platform,
    network-uri,
    network-uri-json,
    optparse-applicative,
    postgresql-simple,
    resource-pool,
    rio,
    safe-exceptions,
    servant,
    servant-multipart,
    servant-server,
    servant-swagger,
    servant-swagger-ui-core,
    servant-swagger-ui,
    servant-util,
    servant-util-beam-pg,
    split,
    swagger2,
    text,
    time,
    typed-process,
    unordered-containers,
    wai,
    wai-extra,
    warp,
    xlsx,
    yaml

executable edna-server
  import: common-options
  main-is: Main.hs
  hs-source-dirs:
      app
  build-depends:
      edna,
      optparse-applicative,
      with-utf8

test-suite edna-test
  import: common-options
  type: exitcode-stdio-1.0
  main-is: Spec.hs
  other-modules:
      Test.AnalysisSpec
      Test.DashboardSpec
      Test.DB.DBSpec
      Test.DB.Gen
      Test.Gen
      Test.LibrarySpec
      Test.Orphans
      Test.ParserSpec
      Test.SampleData
      Test.Setup
      Test.SMT.SMTSpec
      Test.SMT.State
      Test.SwaggerSpec
      Test.UploadSpec
      Test.Util
      Test.Util.URISpec
  hs-source-dirs:
      test
  ghc-options:
    -- Non-exhaustive patterns are ok and useful in tests.
    -Wno-incomplete-patterns
    -Wno-incomplete-uni-patterns
    -- hspec runs tests in parallel, so using multiple threads should be useful.
    -threaded
    -- should be harmless, but helps some people analyse something :shrug:
    -eventlog
    -- Enable -N to use multiple threads.
    -- Increase allocation area by using the recommended -A64m option.
    -- Also increase the allocation area for large objects with -AL256m,
    -- since this area is shared between all threads and thus with high -N
    -- values get used up too soon.

    -- With these options tests usually run faster.

    -- Weird quoting is required for cabal to correctly pass this as _one_ option,
    -- otherwise it splits by spaces.
    "-with-rtsopts=-N -A64m -AL256m"
  build-tool-depends:
      hspec-discover:hspec-discover
  build-depends:
      aeson
    , beam-core
    , beam-postgres
    , bytestring
    , containers
    , edna
    , filepath
    , hedgehog
    , hedgehog-quickcheck
    , hspec
    , hspec-hedgehog
    , microlens
    , microlens-platform
    , mmorph
    , network-uri
    , text
    , time
    , QuickCheck
    , rio
    , servant-swagger
    , servant-util
    , unordered-containers
    , xlsx
