# SPDX-FileCopyrightText: 2021 Serokell <https://serokell.io>
#
# SPDX-License-Identifier: CC0-1.0

# Use this file as a reference when you create package.yaml for your new package.
# If you have multiple packages, you may wish to extract common
# definitions into a separate file.
# Why we need this template:
# • harmless default extensions
# • a good set of warnings
# • metadata fields that are better be set
# • some tricks (e. g. RTS options)

name: edna
## When you think it's ready to be released, set the version to something like 0.1.0.
version: 0
author: Serokell <hi@serokell.io>
github: serokell/edna
synopsis:
  A tool for data analysis aimed to help researchers with their experiments.
description:
  This is the backend (server) for a tool for data analysis aimed to help
  researchers with their experiments.
category: Bio

copyright: 2021 Serokell <https://serokell.io>
# TODO: add license

default-extensions:
  - AllowAmbiguousTypes
  - BangPatterns
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - GADTs
  - GeneralizedNewtypeDeriving
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NegativeLiterals
  - NumDecimals
  - NoImplicitPrelude
  - OverloadedLabels
  - OverloadedStrings
  - PatternSynonyms
  - PolyKinds
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - StrictData
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - UndecidableInstances
  - UndecidableSuperClasses
  - ViewPatterns

ghc-options:
  - -Weverything
  - -Wno-missing-exported-signatures
  - -Wno-missing-import-lists
  - -Wno-missed-specialisations
  - -Wno-all-missed-specialisations
  - -Wno-unsafe
  - -Wno-safe
  - -Wno-missing-local-signatures
  - -Wno-monomorphism-restriction
  - -Wno-implicit-prelude
  - -Wno-prepositive-qualified-module
  - -Wno-inferred-safe-imports
  - -Wno-missing-safe-haskell-mode

dependencies:
  # Usually base is used by all components.
  # However, you may want to use `base-noprelude` to be able to replace
  # the standard `Prelude` with a custom one.
  # Note that you can use cabal's mixins feature for that,
  # but it breaks `stack repl` (`cabal repl` works fine).
  # https://github.com/commercialhaskell/stack/issues/5077
  # Also it's recommended to setup bounds on the version here.
  - base < 5
  - universum

library:
  source-dirs: src

executables:
  edna-server:
    main:                Main.hs
    source-dirs:         app

    dependencies:
    - edna

tests:
  edna-test:
    main:        Main.hs
    source-dirs: test
    build-tools: tasty-discover:tasty-discover

    ghc-options:
    # Non-exhaustive patterns are ok and useful in tests.
    - -Wno-incomplete-patterns
    # tasty runs tests in parallel, so using multiple threads should be useful.
    - -threaded
    # should be harmless, but helps some people analyse something :shrug:
    - -eventlog

    # Enable -N to use multiple threads.
    # Increase allocation area by using the recommended -A64m option.
    # Also increase the allocation area for large objects with -AL256m,
    # since this area is shared between all threads and thus with high -N
    # values get used up too soon.
    #
    # With these options tests usually run faster.
    #
    # Weird quoting is required for cabal to correctly pass this as _one_ option,
    # otherwise it splits by spaces.
    - '"-with-rtsopts=-N -A64m -AL256m"'

    dependencies:
    - edna
    - HUnit
    - tasty
    - tasty-hunit-compat
